{"ast":null,"code":"import * as React from 'react';\nimport { equals, getDisplayName, keys, mapValues, some } from '../utils';\n/**\n * @deprecated Use `createConnectedStoreAs` instead.\n */\n\nexport function connectAs(stores) {\n  return function (Component) {\n    var _a;\n\n    return _a = class extends React.Component {\n      constructor() {\n        super(...arguments);\n        this.state = {\n          stores: mapValues(stores, _ => _.getCurrentSnapshot()),\n          subscriptions: keys(stores).map(k => stores[k].onAll().subscribe(({\n            previousValue,\n            value\n          }) => {\n            if (equals(previousValue, value)) {\n              return false;\n            }\n\n            this.setState(state => ({\n              stores: Object.assign({}, state.stores, {\n                [k]: stores[k].getCurrentSnapshot()\n              })\n            }));\n          }))\n        };\n      }\n\n      componentWillUnmount() {\n        this.state.subscriptions.forEach(_ => _.unsubscribe());\n      }\n\n      shouldComponentUpdate(props, state) {\n        return some(state.stores, (s, k) => s !== this.state.stores[k]) || Object.keys(props).some(_ => props[_] !== this.props[_]);\n      }\n\n      render() {\n        return React.createElement(Component, Object.assign({}, this.props, this.state.stores));\n      }\n\n    }, _a.displayName = `withStore(${getDisplayName(Component)})`, _a;\n  };\n}","map":{"version":3,"sources":["../../src/react/connectAs.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AAGA,SAAe,MAAf,EAAuB,cAAvB,EAAuC,IAAvC,EAA6C,SAA7C,EAAwD,IAAxD,QAAoE,UAApE;AAEA;;;;AAGA,OAAM,SAAU,SAAV,CAEJ,MAFI,EAEU;AACd,SAAO,UACL,SADK,EAGJ;;;AASD,WAAA,EAAA,GAAO,cAAc,KAAK,CAAC,SAApB,CAAyD;AAAzD,MAAA,WAAA,GAAA;;AAEL,aAAA,KAAA,GAAQ;AACN,UAAA,MAAM,EAAE,SAAS,CACf,MADe,EAEf,CAAC,IACC,CAAC,CAAC,kBAAF,EAHa,CADX;AAMN,UAAA,aAAa,EAAE,IAAI,CAAC,MAAD,CAAJ,CAAa,GAAb,CAAiB,CAAC,IAC/B,MAAM,CAAC,CAAD,CAAN,CAAU,KAAV,GAAkB,SAAlB,CAA4B,CAAC;AAAE,YAAA,aAAF;AAAiB,YAAA;AAAjB,WAAD,KAA6B;AACvD,gBAAI,MAAM,CAAC,aAAD,EAAgB,KAAhB,CAAV,EAAkC;AAChC,qBAAO,KAAP;AACD;;AACD,iBAAK,QAAL,CAAc,KAAK,KAAK;AACtB,cAAA,MAAM,EAAE,MAAM,CAAC,MAAP,CAAc,EAAd,EAAkB,KAAK,CAAC,MAAxB,EAAuC;AAC7C,iBAAC,CAAD,GAAK,MAAM,CAAC,CAAD,CAAN,CAAU,kBAAV;AADwC,eAAvC;AADc,aAAL,CAAnB;AAKD,WATD,CADa;AANT,SAAR;AAoCD;;AAhBC,MAAA,oBAAoB,GAAA;AAClB,aAAK,KAAL,CAAW,aAAX,CAAyB,OAAzB,CAAiC,CAAC,IAAI,CAAC,CAAC,WAAF,EAAtC;AACD;;AAED,MAAA,qBAAqB,CAAC,KAAD,EAA6B,KAA7B,EAAyC;AAC5D,eACE,IAAI,CAAC,KAAK,CAAC,MAAP,EAAe,CAAC,CAAD,EAAI,CAAJ,KAAU,CAAC,KAAK,KAAK,KAAL,CAAW,MAAX,CAAkB,CAAlB,CAA/B,CAAJ,IACA,MAAM,CAAC,IAAP,CAAY,KAAZ,EAAmB,IAAnB,CACE,CAAC,IAAK,KAAa,CAAC,CAAD,CAAb,KAAsB,KAAK,KAAL,CAAmB,CAAnB,CAD9B,CAFF;AAMD;;AAED,MAAA,MAAM,GAAA;AACJ,eAAO,KAAA,CAAA,aAAA,CAAC,SAAD,EAAU,MAAA,CAAA,MAAA,CAAA,EAAA,EAAM,KAAK,KAAX,EAA8B,KAAK,KAAL,CAAW,MAAzC,CAAV,CAAP;AACD;;AArC6D,KAAhE,EACS,EAAA,CAAA,WAAA,GAAc,aAAa,cAAc,CAAC,SAAD,CAAW,GAD7D,EAsCC,EAtCD;AAuCD,GAnDD;AAoDD","sourceRoot":"","sourcesContent":["import * as React from 'react';\nimport { equals, getDisplayName, keys, mapValues, some } from '../utils';\n/**\n * @deprecated Use `createConnectedStoreAs` instead.\n */\nexport function connectAs(stores) {\n    return function (Component) {\n        var _a;\n        return _a = class extends React.Component {\n                constructor() {\n                    super(...arguments);\n                    this.state = {\n                        stores: mapValues(stores, _ => _.getCurrentSnapshot()),\n                        subscriptions: keys(stores).map(k => stores[k].onAll().subscribe(({ previousValue, value }) => {\n                            if (equals(previousValue, value)) {\n                                return false;\n                            }\n                            this.setState(state => ({\n                                stores: Object.assign({}, state.stores, {\n                                    [k]: stores[k].getCurrentSnapshot()\n                                })\n                            }));\n                        }))\n                    };\n                }\n                componentWillUnmount() {\n                    this.state.subscriptions.forEach(_ => _.unsubscribe());\n                }\n                shouldComponentUpdate(props, state) {\n                    return (some(state.stores, (s, k) => s !== this.state.stores[k]) ||\n                        Object.keys(props).some(_ => props[_] !== this.props[_]));\n                }\n                render() {\n                    return React.createElement(Component, Object.assign({}, this.props, this.state.stores));\n                }\n            },\n            _a.displayName = `withStore(${getDisplayName(Component)})`,\n            _a;\n    };\n}\n//# sourceMappingURL=connectAs.js.map"]},"metadata":{},"sourceType":"module"}