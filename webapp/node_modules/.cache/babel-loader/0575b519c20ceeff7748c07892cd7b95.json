{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar errorObject_1 = require(\"./util/errorObject\");\n\nvar isArray_1 = require(\"./util/isArray\");\n\nvar isFunction_1 = require(\"./util/isFunction\");\n\nvar isObject_1 = require(\"./util/isObject\");\n\nvar tryCatch_1 = require(\"./util/tryCatch\");\n\nvar UnsubscriptionError_1 = require(\"./util/UnsubscriptionError\");\n/**\n * Represents a disposable resource, such as the execution of an Observable. A\n * Subscription has one important method, `unsubscribe`, that takes no argument\n * and just disposes the resource held by the subscription.\n *\n * Additionally, subscriptions may be grouped together through the `add()`\n * method, which will attach a child Subscription to the current Subscription.\n * When a Subscription is unsubscribed, all its children (and its grandchildren)\n * will be unsubscribed as well.\n *\n * @class Subscription\n */\n\n\nvar Subscription =\n/** @class */\nfunction () {\n  /**\n   * @param {function(): void} [unsubscribe] A function describing how to\n   * perform the disposal of resources when the `unsubscribe` method is called.\n   */\n  function Subscription(unsubscribe) {\n    /**\n     * A flag to indicate whether this Subscription has already been unsubscribed.\n     * @type {boolean}\n     */\n    this.closed = false;\n    /** @internal */\n\n    this._parent = null;\n    /** @internal */\n\n    this._parents = null;\n    /** @internal */\n\n    this._subscriptions = null;\n\n    if (unsubscribe) {\n      this._unsubscribe = unsubscribe;\n    }\n  }\n  /**\n   * Disposes the resources held by the subscription. May, for instance, cancel\n   * an ongoing Observable execution or cancel any other type of work that\n   * started when the Subscription was created.\n   * @return {void}\n   */\n\n\n  Subscription.prototype.unsubscribe = function () {\n    var hasErrors = false;\n    var errors;\n\n    if (this.closed) {\n      return;\n    }\n\n    var _a = this,\n        _parent = _a._parent,\n        _parents = _a._parents,\n        _unsubscribe = _a._unsubscribe,\n        _subscriptions = _a._subscriptions;\n\n    this.closed = true;\n    this._parent = null;\n    this._parents = null; // null out _subscriptions first so any child subscriptions that attempt\n    // to remove themselves from this subscription will noop\n\n    this._subscriptions = null;\n    var index = -1;\n    var len = _parents ? _parents.length : 0; // if this._parent is null, then so is this._parents, and we\n    // don't have to remove ourselves from any parent subscriptions.\n\n    while (_parent) {\n      _parent.remove(this); // if this._parents is null or index >= len,\n      // then _parent is set to null, and the loop exits\n\n\n      _parent = ++index < len && _parents[index] || null;\n    }\n\n    if (isFunction_1.isFunction(_unsubscribe)) {\n      var trial = tryCatch_1.tryCatch(_unsubscribe).call(this);\n\n      if (trial === errorObject_1.errorObject) {\n        hasErrors = true;\n        errors = errors || (errorObject_1.errorObject.e instanceof UnsubscriptionError_1.UnsubscriptionError ? flattenUnsubscriptionErrors(errorObject_1.errorObject.e.errors) : [errorObject_1.errorObject.e]);\n      }\n    }\n\n    if (isArray_1.isArray(_subscriptions)) {\n      index = -1;\n      len = _subscriptions.length;\n\n      while (++index < len) {\n        var sub = _subscriptions[index];\n\n        if (isObject_1.isObject(sub)) {\n          var trial = tryCatch_1.tryCatch(sub.unsubscribe).call(sub);\n\n          if (trial === errorObject_1.errorObject) {\n            hasErrors = true;\n            errors = errors || [];\n            var err = errorObject_1.errorObject.e;\n\n            if (err instanceof UnsubscriptionError_1.UnsubscriptionError) {\n              errors = errors.concat(flattenUnsubscriptionErrors(err.errors));\n            } else {\n              errors.push(err);\n            }\n          }\n        }\n      }\n    }\n\n    if (hasErrors) {\n      throw new UnsubscriptionError_1.UnsubscriptionError(errors);\n    }\n  };\n  /**\n   * Adds a tear down to be called during the unsubscribe() of this\n   * Subscription.\n   *\n   * If the tear down being added is a subscription that is already\n   * unsubscribed, is the same reference `add` is being called on, or is\n   * `Subscription.EMPTY`, it will not be added.\n   *\n   * If this subscription is already in an `closed` state, the passed\n   * tear down logic will be executed immediately.\n   *\n   * @param {TeardownLogic} teardown The additional logic to execute on\n   * teardown.\n   * @return {Subscription} Returns the Subscription used or created to be\n   * added to the inner subscriptions list. This Subscription can be used with\n   * `remove()` to remove the passed teardown logic from the inner subscriptions\n   * list.\n   */\n\n\n  Subscription.prototype.add = function (teardown) {\n    if (!teardown || teardown === Subscription.EMPTY) {\n      return Subscription.EMPTY;\n    }\n\n    if (teardown === this) {\n      return this;\n    }\n\n    var subscription = teardown;\n\n    switch (typeof teardown) {\n      case 'function':\n        subscription = new Subscription(teardown);\n\n      case 'object':\n        if (subscription.closed || typeof subscription.unsubscribe !== 'function') {\n          return subscription;\n        } else if (this.closed) {\n          subscription.unsubscribe();\n          return subscription;\n        } else if (typeof subscription._addParent !== 'function'\n        /* quack quack */\n        ) {\n            var tmp = subscription;\n            subscription = new Subscription();\n            subscription._subscriptions = [tmp];\n          }\n\n        break;\n\n      default:\n        throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');\n    }\n\n    var subscriptions = this._subscriptions || (this._subscriptions = []);\n    subscriptions.push(subscription);\n\n    subscription._addParent(this);\n\n    return subscription;\n  };\n  /**\n   * Removes a Subscription from the internal list of subscriptions that will\n   * unsubscribe during the unsubscribe process of this Subscription.\n   * @param {Subscription} subscription The subscription to remove.\n   * @return {void}\n   */\n\n\n  Subscription.prototype.remove = function (subscription) {\n    var subscriptions = this._subscriptions;\n\n    if (subscriptions) {\n      var subscriptionIndex = subscriptions.indexOf(subscription);\n\n      if (subscriptionIndex !== -1) {\n        subscriptions.splice(subscriptionIndex, 1);\n      }\n    }\n  };\n  /** @internal */\n\n\n  Subscription.prototype._addParent = function (parent) {\n    var _a = this,\n        _parent = _a._parent,\n        _parents = _a._parents;\n\n    if (!_parent || _parent === parent) {\n      // If we don't have a parent, or the new parent is the same as the\n      // current parent, then set this._parent to the new parent.\n      this._parent = parent;\n    } else if (!_parents) {\n      // If there's already one parent, but not multiple, allocate an Array to\n      // store the rest of the parent Subscriptions.\n      this._parents = [parent];\n    } else if (_parents.indexOf(parent) === -1) {\n      // Only add the new parent to the _parents list if it's not already there.\n      _parents.push(parent);\n    }\n  };\n  /** @nocollapse */\n\n\n  Subscription.EMPTY = function (empty) {\n    empty.closed = true;\n    return empty;\n  }(new Subscription());\n\n  return Subscription;\n}();\n\nexports.Subscription = Subscription;\n\nfunction flattenUnsubscriptionErrors(errors) {\n  return errors.reduce(function (errs, err) {\n    return errs.concat(err instanceof UnsubscriptionError_1.UnsubscriptionError ? err.errors : err);\n  }, []);\n}","map":{"version":3,"sources":["../../src/Subscription.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar errorObject_1 = require(\"./util/errorObject\");\nvar isArray_1 = require(\"./util/isArray\");\nvar isFunction_1 = require(\"./util/isFunction\");\nvar isObject_1 = require(\"./util/isObject\");\nvar tryCatch_1 = require(\"./util/tryCatch\");\nvar UnsubscriptionError_1 = require(\"./util/UnsubscriptionError\");\n/**\n * Represents a disposable resource, such as the execution of an Observable. A\n * Subscription has one important method, `unsubscribe`, that takes no argument\n * and just disposes the resource held by the subscription.\n *\n * Additionally, subscriptions may be grouped together through the `add()`\n * method, which will attach a child Subscription to the current Subscription.\n * When a Subscription is unsubscribed, all its children (and its grandchildren)\n * will be unsubscribed as well.\n *\n * @class Subscription\n */\nvar Subscription = /** @class */ (function () {\n    /**\n     * @param {function(): void} [unsubscribe] A function describing how to\n     * perform the disposal of resources when the `unsubscribe` method is called.\n     */\n    function Subscription(unsubscribe) {\n        /**\n         * A flag to indicate whether this Subscription has already been unsubscribed.\n         * @type {boolean}\n         */\n        this.closed = false;\n        /** @internal */\n        this._parent = null;\n        /** @internal */\n        this._parents = null;\n        /** @internal */\n        this._subscriptions = null;\n        if (unsubscribe) {\n            this._unsubscribe = unsubscribe;\n        }\n    }\n    /**\n     * Disposes the resources held by the subscription. May, for instance, cancel\n     * an ongoing Observable execution or cancel any other type of work that\n     * started when the Subscription was created.\n     * @return {void}\n     */\n    Subscription.prototype.unsubscribe = function () {\n        var hasErrors = false;\n        var errors;\n        if (this.closed) {\n            return;\n        }\n        var _a = this, _parent = _a._parent, _parents = _a._parents, _unsubscribe = _a._unsubscribe, _subscriptions = _a._subscriptions;\n        this.closed = true;\n        this._parent = null;\n        this._parents = null;\n        // null out _subscriptions first so any child subscriptions that attempt\n        // to remove themselves from this subscription will noop\n        this._subscriptions = null;\n        var index = -1;\n        var len = _parents ? _parents.length : 0;\n        // if this._parent is null, then so is this._parents, and we\n        // don't have to remove ourselves from any parent subscriptions.\n        while (_parent) {\n            _parent.remove(this);\n            // if this._parents is null or index >= len,\n            // then _parent is set to null, and the loop exits\n            _parent = (++index < len && _parents[index]) || null;\n        }\n        if (isFunction_1.isFunction(_unsubscribe)) {\n            var trial = tryCatch_1.tryCatch(_unsubscribe).call(this);\n            if (trial === errorObject_1.errorObject) {\n                hasErrors = true;\n                errors =\n                    errors ||\n                        (errorObject_1.errorObject.e instanceof UnsubscriptionError_1.UnsubscriptionError\n                            ? flattenUnsubscriptionErrors(errorObject_1.errorObject.e.errors)\n                            : [errorObject_1.errorObject.e]);\n            }\n        }\n        if (isArray_1.isArray(_subscriptions)) {\n            index = -1;\n            len = _subscriptions.length;\n            while (++index < len) {\n                var sub = _subscriptions[index];\n                if (isObject_1.isObject(sub)) {\n                    var trial = tryCatch_1.tryCatch(sub.unsubscribe).call(sub);\n                    if (trial === errorObject_1.errorObject) {\n                        hasErrors = true;\n                        errors = errors || [];\n                        var err = errorObject_1.errorObject.e;\n                        if (err instanceof UnsubscriptionError_1.UnsubscriptionError) {\n                            errors = errors.concat(flattenUnsubscriptionErrors(err.errors));\n                        }\n                        else {\n                            errors.push(err);\n                        }\n                    }\n                }\n            }\n        }\n        if (hasErrors) {\n            throw new UnsubscriptionError_1.UnsubscriptionError(errors);\n        }\n    };\n    /**\n     * Adds a tear down to be called during the unsubscribe() of this\n     * Subscription.\n     *\n     * If the tear down being added is a subscription that is already\n     * unsubscribed, is the same reference `add` is being called on, or is\n     * `Subscription.EMPTY`, it will not be added.\n     *\n     * If this subscription is already in an `closed` state, the passed\n     * tear down logic will be executed immediately.\n     *\n     * @param {TeardownLogic} teardown The additional logic to execute on\n     * teardown.\n     * @return {Subscription} Returns the Subscription used or created to be\n     * added to the inner subscriptions list. This Subscription can be used with\n     * `remove()` to remove the passed teardown logic from the inner subscriptions\n     * list.\n     */\n    Subscription.prototype.add = function (teardown) {\n        if (!teardown || teardown === Subscription.EMPTY) {\n            return Subscription.EMPTY;\n        }\n        if (teardown === this) {\n            return this;\n        }\n        var subscription = teardown;\n        switch (typeof teardown) {\n            case 'function':\n                subscription = new Subscription(teardown);\n            case 'object':\n                if (subscription.closed ||\n                    typeof subscription.unsubscribe !== 'function') {\n                    return subscription;\n                }\n                else if (this.closed) {\n                    subscription.unsubscribe();\n                    return subscription;\n                }\n                else if (typeof subscription._addParent !== 'function' /* quack quack */) {\n                    var tmp = subscription;\n                    subscription = new Subscription();\n                    subscription._subscriptions = [tmp];\n                }\n                break;\n            default:\n                throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');\n        }\n        var subscriptions = this._subscriptions || (this._subscriptions = []);\n        subscriptions.push(subscription);\n        subscription._addParent(this);\n        return subscription;\n    };\n    /**\n     * Removes a Subscription from the internal list of subscriptions that will\n     * unsubscribe during the unsubscribe process of this Subscription.\n     * @param {Subscription} subscription The subscription to remove.\n     * @return {void}\n     */\n    Subscription.prototype.remove = function (subscription) {\n        var subscriptions = this._subscriptions;\n        if (subscriptions) {\n            var subscriptionIndex = subscriptions.indexOf(subscription);\n            if (subscriptionIndex !== -1) {\n                subscriptions.splice(subscriptionIndex, 1);\n            }\n        }\n    };\n    /** @internal */\n    Subscription.prototype._addParent = function (parent) {\n        var _a = this, _parent = _a._parent, _parents = _a._parents;\n        if (!_parent || _parent === parent) {\n            // If we don't have a parent, or the new parent is the same as the\n            // current parent, then set this._parent to the new parent.\n            this._parent = parent;\n        }\n        else if (!_parents) {\n            // If there's already one parent, but not multiple, allocate an Array to\n            // store the rest of the parent Subscriptions.\n            this._parents = [parent];\n        }\n        else if (_parents.indexOf(parent) === -1) {\n            // Only add the new parent to the _parents list if it's not already there.\n            _parents.push(parent);\n        }\n    };\n    /** @nocollapse */\n    Subscription.EMPTY = (function (empty) {\n        empty.closed = true;\n        return empty;\n    })(new Subscription());\n    return Subscription;\n}());\nexports.Subscription = Subscription;\nfunction flattenUnsubscriptionErrors(errors) {\n    return errors.reduce(function (errs, err) {\n        return errs.concat(err instanceof UnsubscriptionError_1.UnsubscriptionError ? err.errors : err);\n    }, []);\n}\n//# sourceMappingURL=Subscription.js.map"]},"metadata":{},"sourceType":"script"}